#include "por.h"

//double startTime, endTime;
//startTime = getCPUTime();
//endTime = getCPUTime();

static unsigned long newq,t,m;
static unsigned	char uth[32];
double totalTime,totalStartTime, totalEndTime;
double readTime,readStartTime, readEndTime;
double prpTime,prpStartTime, prpEndTime;
double eccTime,eccStartTime, eccEndTime;
double macTime,macStartTime, macEndTime;
double chalTime,chalStartTime, chalEndTime;
double writeTime,writeStartTime, writeEndTime;
double decTime,decStartTime, decEndTime;
static struct timespec start, finish;

//Challenge structure
typedef struct { 
	unsigned long j;
	unsigned char k_j_c[16];
	int u;
}chal;


//decoding file blocks structure
typedef struct d_b{
	unsigned char file_blocks[alpha][32]; 
	unsigned char frequency[alpha]; 
}decoded_blocks; 

extern unsigned char k_file_perm[16],k_ecc_perm[16],k_ecc_enc[16],
	k_chal[16],k_ind[16],k_enc[16],k_mac[16];

// outer layer decoding of RS code
int outer_decoding(FILE* orifp, FILE* parifp, FILE *output, FILE* tempfp, decoded_blocks *db);

// inner layer decoding of concatenated code
void inner_decoding(decoded_blocks *db,unsigned char * c_in_codeword, unsigned long * indices);

// using GMD to decoding concatenated code
void inner_GMD(decoded_blocks *db,unsigned char * c_in_codeword, unsigned long * indices,FILE * fp);

void concat_encode(unsigned char * message,unsigned char* codeword) {
	unsigned char tmp_code[v*32*n1/k1],stripe[k1],stripe_code[n1];
	int index,i,j;
	
	for (index=0;index<v*32;index++) {
		tmp_code[index] = message[index];
	}
	for (i=0;i<v;i++) {
		for (j=0;j<sizeof(stripe);j++) {
			stripe[j] = message[i*k1+j];
		}
		initialize_ecc();
		encode_data(stripe,k1,stripe_code);
		for (j=0;j<n1-k1;j++) {
			tmp_code[index] = stripe_code[k1+j];
			index++;
		}
	}
	index = 0;
	for (i=0;i<v*n1/k1;i++) {
		for (j=0;j<sizeof(stripe);j++) {
			stripe[j] = tmp_code[i*k2+j];
		}
		encode_data(stripe,k2,stripe_code);
		for (j=0;j<n2;j++) {
			codeword[index] = stripe_code[j];
			index++;
		}
	}
}

unsigned char * execute_challenge(FILE* fp, int j, char * kjc, int u, unsigned long * indices) {
	unsigned char message[v*32];
	unsigned char codeword[w*32];

	int pos = 0;
	int i,p;
	keygen_init();
	seeding(kjc);
	for(p=0;p<v;p++) {
		unsigned long randomIndex;
		char rand[8];
		keygen(rand, 8);
		indices[p] = *(unsigned long *)rand%t;
	}
	int index = 0;
	for (i=0;i<v;i++) {
		fseek(fp,indices[i]*32,SEEK_SET);
		unsigned char buffer[32];
        readStartTime = getCPUTime();
		clock_gettime(CLOCK_MONOTONIC, &start);
		fread(buffer, 32, 1, fp);
        clock_gettime(CLOCK_MONOTONIC, &finish);
        double addTime = finish.tv_sec - start.tv_sec;
        addTime += (finish.tv_nsec - start.tv_nsec)/1000000000.0;
        readTime += getCPUTime() - readStartTime+addTime;
		for(p=0;p<32;p++) {
			message[index] = buffer[p];
			index++;
		}
	}
	concat_encode(message,codeword);
	for (i=0;i<32;i++) {
		uth[i] = codeword[32*u+i];
	}
	return uth;
}

int checkFile(FILE* fp1,unsigned char * mac) {
	unsigned char newMac[16];
	unsigned char buf[BLOCK_SIZE];
	int i,j;
	FILE * orifp;
	fseek(fp1,0,SEEK_SET);
	if ((orifp = fopen("original", "w+b")) == NULL){
		printf("couldn't open input file for reading.\n");
		return -1;
        }
	for (i=0;i<m;i++) {
        readStartTime = getCPUTime();
		clock_gettime(CLOCK_MONOTONIC, &start);
        fread(buf, BLOCK_SIZE, 1, fp1);
        clock_gettime(CLOCK_MONOTONIC, &finish);
        double addTime = finish.tv_sec - start.tv_sec;
        addTime += (finish.tv_nsec - start.tv_nsec)/1000000000.0;
        readTime += getCPUTime() - readStartTime+addTime;
		writeStartTime = getCPUTime();
        clock_gettime(CLOCK_MONOTONIC, &start);
        fwrite(buf,BLOCK_SIZE,1,orifp);
        clock_gettime(CLOCK_MONOTONIC, &finish);
        addTime = finish.tv_sec - start.tv_sec;
		addTime += (finish.tv_nsec - start.tv_nsec)/1000000000.0;
		writeTime += getCPUTime() - writeStartTime+addTime;
	}
	fclose(orifp);
	macStartTime = getCPUTime();
	printf("HMAC using key: ");
	displayCharArray(k_mac,16);
	hmac("original",newMac,k_mac);
	macEndTime = getCPUTime();
	macTime = macEndTime - macStartTime;
	printf("MAC of the file part: ");
	displayCharArray(newMac,16);

	for (i=0;i<16;i++) {
		if (newMac[i]!=mac[i])
			return -1;
	}
	return 0;
}

int initial_outer_decoding(FILE* fp1,unsigned char * mac) {
	unsigned char newMac[16];
	unsigned char buf[BLOCK_SIZE];
	int i,j;
	FILE * orifp, * parifp;

	if ((orifp = fopen("original", "r+b")) == NULL){
		printf("couldn't open input file for reading.\n");
		return -1;
        }
	if ((parifp = fopen("parity", "w+b")) == NULL){
		printf("couldn't open input file for reading.\n");
		return -1;
        }
	fseek(fp1,m*BLOCK_SIZE,SEEK_SET);
	for (i=0;i<t-m;i++) {
        readStartTime = getCPUTime();
		clock_gettime(CLOCK_MONOTONIC, &start);
        fread(buf, BLOCK_SIZE, 1, fp1);
        clock_gettime(CLOCK_MONOTONIC, &finish);
        double addTime = finish.tv_sec - start.tv_sec;
        addTime += (finish.tv_nsec - start.tv_nsec)/1000000000.0;
        readTime += getCPUTime() - readStartTime+addTime;
        writeStartTime = getCPUTime();
        clock_gettime(CLOCK_MONOTONIC, &start);
        fwrite(buf,BLOCK_SIZE,1,parifp);
        clock_gettime(CLOCK_MONOTONIC, &finish);
        addTime = finish.tv_sec - start.tv_sec;
		addTime += (finish.tv_nsec - start.tv_nsec)/1000000000.0;
		writeTime += getCPUTime() - writeStartTime+addTime;
	}
	fclose(parifp);
	if ((parifp = fopen("parity", "r+b")) == NULL){
		printf("couldn't open input file for reading.\n");
		return -1;
        }
   FILE* outer;
   if ((outer = fopen("outerdec", "w+b")) == NULL){
		printf("couldn't open input file for reading.\n");
		return -1;
        }     
   FILE* tempfp = fopen("tempfile", "w+b");
   initialize_ecc();
   outer_decoding(orifp, parifp, outer, tempfp, NULL);
	macStartTime = getCPUTime();
	printf("HMAC using key: ");
	displayCharArray(k_mac,16);	
	hmac("outerdec",newMac,k_mac);
	macEndTime = getCPUTime();
	macTime = macEndTime - macStartTime;
	printf("MAC of the file part: ");
	displayCharArray(newMac,16);

	for (i=0;i<16;i++) {
		if (newMac[i]!=mac[i])
			return -1;
	}
	return 0;
}

int main(int argc,char** argv)
{

	totalStartTime = getCPUTime();
	//endTime = getCPUTime();
	printf("start POR extract...\n");
	char * filename = argv[1];
    FILE *fp1,*fp2,*ori_fp, *pari_fp, *temp_fp;
	//open encoded file for reading
  	if ((fp1 = fopen(argv[1], "r+b")) == NULL){
        printf("couldn't open input file for reading.\n");
        return -1;
    }
    
	int p;
	//t = atoi(argv[3]);
	unsigned long fileLen;
	fseek(fp1,0,SEEK_END);
	fileLen = ftell(fp1);
	t = (fileLen-16-q*BLOCK_SIZE) / BLOCK_SIZE;
	m = t*k/n;
	printf("extract for file \"%s\" with size=%lu m=%lu and t=%lu\n",filename,fileLen,m,t);
	//use master key and call keygen to generate all the keys here.	
	master_keygen(argv[2]);
	
	//read mac from the end of the old file	
	unsigned char originalmac[16];
	int bufLength=16;
    readStartTime = getCPUTime();
    clock_gettime(CLOCK_MONOTONIC, &start);
    fseek(fp1, fileLen-bufLength, SEEK_SET);
	fread(originalmac, sizeof(originalmac), 1, fp1);
    clock_gettime(CLOCK_MONOTONIC, &finish);
    double addTime = finish.tv_sec - start.tv_sec;
    addTime += (finish.tv_nsec - start.tv_nsec)/1000000000.0;
    readTime += getCPUTime() - readStartTime+addTime;
	printf("\nMAC attached at the end of the file: ");
	displayCharArray(originalmac,16);
	
	if (checkFile(fp1,originalmac)==0) {
		printf("File is intact.\n");
		fclose(fp1);
		totalEndTime = getCPUTime();
		totalTime = totalEndTime - totalStartTime;
		printf("#RESULT#\n");
		printf("0\n");
		printf("%lf\n",totalTime);
		printf("%lf\n",readTime);
		printf("%lf\n",prpTime);
		printf("%lf\n",eccTime);
		printf("%lf\n",macTime);
		printf("%lf\n",chalTime);
		printf("%lf\n",writeTime);
        printf("%lf\n",decTime);
		exit(0);
	}
	else if (initial_outer_decoding(fp1,originalmac)==0){
		//initial_outer_decoding(fp1, newfp);
		//if (checkFile(newfp,originalmac)==0) {
			printf("File is recovered after outer encoding.\n");
			fclose(fp1);
			system("rm original");
			system("rm parity");
			system("rm tempfile");
			char command[100];
			sprintf(command, "mv outerdec %s", argv[1]);
			system(command);
			totalEndTime = getCPUTime();
			totalTime = totalEndTime - totalStartTime;
			printf("#RESULT#\n");
			printf("1\n");
			printf("%lf\n",totalTime);
			printf("%lf\n",readTime);
			printf("%lf\n",prpTime);
			printf("%lf\n",eccTime);
			printf("%lf\n",macTime);
			printf("%lf\n",chalTime);
			printf("%lf\n",writeTime);
			printf("%lf\n",decTime);
			exit(0);
		//}
	}
	/*else {
		printf("File is corrupted.\n");
		printf("#RESULT#\n");
		printf("2\n");
		exit(0);
	}// */
	int tempv = v;
	newq = alpha * t / tempv;
	decoded_blocks * db;
	unsigned int i,j,u,size,index;
	char * codeword,mac;
	chal c[newq];
	unsigned char k_j_c[16]; 
	char str[999]; 
	char * temp_block;
	// after writing new file, delete old file

	char * r_file="recovered";
	char * temp ="temp";
	unsigned int * v_chal_indices;


	//open output file for writing
	if ((fp2 = fopen(r_file, "w+b")) == NULL){
	         printf("couldn't open output file for writing.\n");
	         return -1;
    }

	//open temp file for writing file part
	if ((ori_fp = fopen("original", "w+b")) == NULL){
	         printf("couldn't open temperory file for writing.\n");
	         return -1;
    }
    
    //open temp file for writing parity part
	if ((pari_fp = fopen("parity", "w+b")) == NULL){
        printf("couldn't open temperory file for writing.\n");
        return -1;
    }
    
    if ((temp_fp = fopen("tempfile", "w+b")) == NULL){
        printf("couldn't open output file for writing.\n");
        return -1;
    }

	//allocate memory for D
	db = malloc (sizeof(struct d_b)*t);  
	//for(i=0;i<t;i++) {
	//	printf("for db[%d], sizeof frequency=%lu\n",i,sizeof(db[i].frequency));
	//	printf("display frequency[5] %d\n",db[i].frequency[5]);
	//}
	if(db == NULL) {
		printf("failed to allocate memory for d.\n");
		return -1;
	}

	//total number of challenges		
	size = alpha*(t/v); 

	//allocate memory for the challenge set
	//if ((c = (chal *)malloc(sizeof(chal)*size))== NULL) {
	//	fprintf(stderr, "failed to allocate memory for challenges.\n");
	//	return -1;
	//}
	
	// populate challenge set
	printf("\nstart inner layer decoding...\n");
	printf("generate %lu challenges\n",newq);
	keygen_init();
	seeding(k_chal);	
	for (j=0;j<newq;j++){
		keygen(c[j].k_j_c, 16);
		c[j].j = j;
	}
	printf("kjc for each challenge generated\n");
	
    chalStartTime = getCPUTime();
    // for each challenge
	for (i=0;i<newq;i++){
		
		//unsigned char * codeword = (unsigned char *) malloc(sizeof(unsigned char)*32*w);
		unsigned char codeword[32*w];
		unsigned long indices[v];

		index = 0;
		//execute each challenge w times
		for(u=0;u<w;u++){
			unsigned char * subcode = execute_challenge(fp1,c[i].j, c[i].k_j_c, u, indices);
			//printf("%d-th sub code\n",u);
			//displayCharArray(subcode,32);
			int tempI;
			for(tempI=0;tempI<32;tempI++)
				codeword[index++] = subcode[tempI];
		}
		//printf("codeword for challenge #%d\n",i);
		//displayCharArray(codeword,4096);
		// inner code decoding
		printf("start decoding for challenge #%d\n",i);
		inner_GMD(db,codeword,indices,fp1); 
		printf("finish decoding for challenge %d\n",i);

		//free the memory
		//free(codeword);
		//free(indices);
		//delete old file
		//remove(filename);
	}
	
	for (i=0;i<t;i++){
		int max_frequency=0;
		int max_index=0;
		
		for(j=0;j<sizeof(db[i].frequency);j++){
			if(db[i].frequency[j] > max_frequency){
				max_frequency = db[i].frequency[j];
				max_index = j;
			}
		}
		if(max_frequency==0) {
			fseek(fp1,i*32,SEEK_SET);
			unsigned char buffer[32];
            readStartTime = getCPUTime();
            clock_gettime(CLOCK_MONOTONIC, &start);
			fread(buffer, 32, 1, fp1);
            clock_gettime(CLOCK_MONOTONIC, &finish);
            double addTime = finish.tv_sec - start.tv_sec;
            addTime += (finish.tv_nsec - start.tv_nsec)/1000000000.0;
            readTime += getCPUTime() - readStartTime+addTime;
            if (i<m) {
                writeStartTime = getCPUTime();
                clock_gettime(CLOCK_MONOTONIC, &start);
                fwrite(buffer,32,1,ori_fp);
                clock_gettime(CLOCK_MONOTONIC, &finish);
                double addTime = finish.tv_sec - start.tv_sec;
                addTime += (finish.tv_nsec - start.tv_nsec)/1000000000.0;
                writeTime += getCPUTime() - writeStartTime+addTime;
            }
            else {
                writeStartTime = getCPUTime();
                clock_gettime(CLOCK_MONOTONIC, &start);
                fwrite(buffer,32,1,pari_fp);
                clock_gettime(CLOCK_MONOTONIC, &finish);
                double addTime = finish.tv_sec - start.tv_sec;
                addTime += (finish.tv_nsec - start.tv_nsec)/1000000000.0;
                writeTime += getCPUTime() - writeStartTime+addTime;
            }
		 }
		else {
            if (i<m) {
                writeStartTime = getCPUTime();
                clock_gettime(CLOCK_MONOTONIC, &start);
                fwrite(db[i].file_blocks[max_index],32,1,ori_fp);
                clock_gettime(CLOCK_MONOTONIC, &finish);
                double addTime = finish.tv_sec - start.tv_sec;
                addTime += (finish.tv_nsec - start.tv_nsec)/1000000000.0;
                writeTime += getCPUTime() - writeStartTime+addTime;
            }
            else{
                writeStartTime = getCPUTime();
                clock_gettime(CLOCK_MONOTONIC, &start);
                fwrite(db[i].file_blocks[max_index],32,1,pari_fp);
                clock_gettime(CLOCK_MONOTONIC, &finish);
                double addTime = finish.tv_sec - start.tv_sec;
                addTime += (finish.tv_nsec - start.tv_nsec)/1000000000.0;
                writeTime += getCPUTime() - writeStartTime+addTime;
            }
            //check if the location can be corrected or has erasure
            if(ceil(max_frequency / sizeof(db[i].frequency)) < (delta+0.5)){
                db[i].frequency[0]=-1;
            }
        }
	}
    fclose(fp1);
	chalTime = getCPUTime() - chalStartTime;
	//perform outer decoding
	outer_decoding(ori_fp,pari_fp,fp2,temp_fp,db);
	
	//compute mac
	unsigned char newmac[16];
    macStartTime = getCPUTime();
	hmac("recovered",newmac,k_mac);
    macTime = getCPUTime() - macStartTime;
    //printf("display MAC\n");
    //displayCharArray(newmac,16);
	
	//if verified, print the file. Else output the error
	int flag=1;	
	for(i=0;i<MACSIZE;i++){
		if(newmac[i]!=originalmac[i]){	
			flag=0;
			break;
		}
	}
	if (flag==1){
		totalEndTime = getCPUTime();
		totalTime = totalEndTime - totalStartTime;
		printf("Your file is recovered\n");
	    printf("#RESULT#\n");
	 	printf("1\n");
	    printf("%lf\n",totalTime);
	    printf("%lf\n",readTime);
	    printf("%lf\n",prpTime);
	    printf("%lf\n",eccTime);
	    printf("%lf\n",macTime);
	    printf("%lf\n",chalTime);
	    printf("%lf\n",writeTime);
        printf("%lf\n",decTime);
	}else{
		totalEndTime = getCPUTime();
		totalTime = totalEndTime - totalStartTime;
    	printf("#RESULT#\n");
 		printf("2\n");
        printf("%lf\n",totalTime);
        printf("%lf\n",readTime);
	    printf("%lf\n",prpTime);
	    printf("%lf\n",eccTime);
	    printf("%lf\n",macTime);
	    printf("%lf\n",chalTime);
	    printf("%lf\n",writeTime);
        printf("%lf\n",decTime);
		printf("Your file can not be recovered.\n");
		return -1;
	}

	fclose(fp2);
	return 0;
}

// get the reverse of the PRP
void reverseprp(int stripes, int * prp_table, int * reverse_prp_table)
{
	int i=0;
	for(i=0;i<stripes;i++){
		int num=prp_table[i];
		//printf("prp %d: %d\n",i,num);
		reverse_prp_table[num]=i;	
	}
}

// Procecdure for OUTER DECODING
/* 1. decrypt the parity block using key k3
2. decode using key k2
3. unpermute all parity blocks and store
4. for the permutted message, get each of the strip , append it with parity. 
5. deocode using ecc out
6. we will get permutted file
7. unpermute it using pRP table 
*/
int outer_decoding(FILE* orifp, FILE* parifp, FILE *output, FILE* tempfp, decoded_blocks *db)
{
	int i,j,stripes,fileLen,index;
	int* prp_table;
	int* reverse_prp_table;
	char message[k];
	char codeword[n];

	//unsigned char decodedfile[stripes][k];
	int erasure[1];
	//FILE* tempfp = fopen("tempfile", "w+b");
	if (tempfp  == NULL){
 		printf("couldn't open temperory file for writing.\n");
 		return -1;
    	}

	//find the number of stripes in the file 
	fseek(parifp,0,SEEK_END);
	fileLen = ftell(parifp);
	printf("display fileLen of parity %d\n",fileLen);
	//if(fileLen % n==0) 
		stripes = fileLen/d; 
	//else
		//stripes = fileLen/n+1;
	printf("number of stripes for outer decoding %d\n",stripes);
	fflush(stdout);
	unsigned char ** parity;//[stripes][d]; 
	parity = (unsigned char **) malloc(stripes*sizeof(unsigned char *));  
	for (i = 0; i < stripes; i++) {
   	parity[i] = (unsigned char *) malloc(d*sizeof(unsigned char));  
   	}
	//call prp
	prp_table =malloc(sizeof(int)*stripes);
	reverse_prp_table = malloc(sizeof(int)*stripes);
	
	//perform reverse prp
    prpStartTime = getCPUTime();
	prp_table = prp(stripes, k_ecc_perm);
	reverseprp(stripes,prp_table,reverse_prp_table);
    prpTime += getCPUTime() - prpStartTime;
	/*for(i=0;i<stripes;i++){
		printf("prp %d: %d\n",i,prp_table[i]);
		printf("rev prp %d: %d\n",i,reverse_prp_table[i]);
	}*/
	//free(prp_table);
	printf("check1\n");
	enc_init(k_ecc_enc);
	
	//decrypt parity part
	rewind(parifp);
	rewind(orifp);

	//read parity parts directly
	unsigned char paritybytes[stripes][d];
	for (i=0;i<stripes;i++) {
		unsigned char ct[d];
		//unsigned char pt[d];	
        readStartTime = getCPUTime();
		clock_gettime(CLOCK_MONOTONIC, &start);
		fread(ct,sizeof(ct),1,parifp);
		clock_gettime(CLOCK_MONOTONIC, &finish);
		double addTime = finish.tv_sec - start.tv_sec;
		addTime += (finish.tv_nsec - start.tv_nsec)/1000000000.0;
		readTime += getCPUTime() - readStartTime+addTime;
		decStartTime = getCPUTime();
		decrypt(ct,paritybytes[prp_table[i]],sizeof(ct));
        decTime += getCPUTime() -decStartTime;
		//printf("prp rev for %d: ",i);
		//displayCharArray(paritybytes[i],sizeof(ct));
		for(j=0;j<d;j++){
			parity[i][j]=ct[j];
		}
	}
	//for (i=0;i<stripes;i++) {
	//	printf("prp rev for %d: ",i);
	//	displayCharArray(paritybytes[i],sizeof(paritybytes[i]));
	//}
	free(reverse_prp_table);
	reverse_prp_table = malloc(sizeof(int)*m);
	prp_table =malloc(sizeof(int)*m);
    prpStartTime = getCPUTime();
	prp_table = prp(m, k_file_perm);
	reverseprp(m,prp_table,reverse_prp_table);
    prpTime+=getCPUTime()-prpStartTime;
	//get the message and the parity, create codeword and decode it
	//rewind(temp_fp);
	FILE * prp = fopen("prp","w+b");
	for(i=0;i<m;i++) {
		unsigned char prpbuf[BLOCK_SIZE];
        readStartTime = getCPUTime();
		clock_gettime(CLOCK_MONOTONIC, &start);
		fseek(orifp,prp_table[i]*32,SEEK_SET);
		size_t br = fread(prpbuf,1,BLOCK_SIZE,orifp);
        clock_gettime(CLOCK_MONOTONIC, &finish);
		double addTime = finish.tv_sec - start.tv_sec;
		addTime += (finish.tv_nsec - start.tv_nsec)/1000000000.0;
		readTime += getCPUTime() - readStartTime+addTime;
        writeStartTime = getCPUTime();
		clock_gettime(CLOCK_MONOTONIC, &start);
		fwrite(prpbuf,1,BLOCK_SIZE,prp);
        clock_gettime(CLOCK_MONOTONIC, &finish);
        addTime = finish.tv_sec - start.tv_sec;
		addTime += (finish.tv_nsec - start.tv_nsec)/1000000000.0;
		writeTime += getCPUTime() - writeStartTime+addTime;
	}
	fclose(prp);
	prp = fopen("prp","r+b");
	for(i=0;i<stripes;i++) {
		index=0;
		unsigned char code[n];
        readStartTime = getCPUTime();
		clock_gettime(CLOCK_MONOTONIC, &start);
		size_t br = fread(code,1,k,prp);
        clock_gettime(CLOCK_MONOTONIC, &finish);
		double addTime = finish.tv_sec - start.tv_sec;
		addTime += (finish.tv_nsec - start.tv_nsec)/1000000000.0;
		readTime += getCPUTime() - readStartTime+addTime;
		int pad = k-br;
		int ii;
		for (ii=0;ii<pad;ii++)
			code[br+ii] = 0;
			
		for(j=0;j<d;j++) {
			code[k+j] = paritybytes[i][j]; 
		}
        eccStartTime = getCPUTime();
		//printf("whole code %d: ",i);
		//displayCharArray(code,n);
		decode_data(code, n);
		int syn = check_syndrome ();
		//printf("syndrome: %d\n",syn);
		if (syn != 0) {
			correct_errors_erasures(code,n,0,erasure);
		}
        eccTime = getCPUTime() - eccStartTime;
		//printf("decoded code %d: ",i);
		// displayCharArray(code,n);
		//calculate block index of the parity part
        writeStartTime = getCPUTime();
        clock_gettime(CLOCK_MONOTONIC, &start);
		fwrite(code,1,br,tempfp);
        clock_gettime(CLOCK_MONOTONIC, &finish);
        addTime = finish.tv_sec - start.tv_sec;
		addTime += (finish.tv_nsec - start.tv_nsec)/1000000000.0;
		writeTime += getCPUTime() - writeStartTime+addTime;
	}
	fclose(tempfp);
	for (i = 0; i < stripes; i++){  
        free(parity[i]);
	}  
	free(parity);
	if ((tempfp = fopen("tempfile", "r+b")) == NULL){
 		printf("couldn't open temperory file for writing.\n");
 		return -1;
    }
	// write data to the file by applying second level of permutation
	//free(prp_table);
	//free(reverse_prp_table);
	//printf("display m = %lu\n",m);

	rewind(tempfp);
	rewind(output);
	unsigned char buf[BLOCK_SIZE];
	for(i=0;i<m;i++) {
        readStartTime = getCPUTime();
		clock_gettime(CLOCK_MONOTONIC, &start);
        fseek(tempfp,reverse_prp_table[i]*32,SEEK_SET);
		fread(buf, BLOCK_SIZE, 1, tempfp);
        clock_gettime(CLOCK_MONOTONIC, &finish);
		double addTime = finish.tv_sec - start.tv_sec;
		addTime += (finish.tv_nsec - start.tv_nsec)/1000000000.0;
		readTime += getCPUTime() - readStartTime+addTime;
		writeStartTime = getCPUTime();
        clock_gettime(CLOCK_MONOTONIC, &start);
        fwrite(buf,BLOCK_SIZE,1,output);
      	writeEndTime = getCPUTime();
        clock_gettime(CLOCK_MONOTONIC, &finish);
        addTime = finish.tv_sec - start.tv_sec;
		addTime += (finish.tv_nsec - start.tv_nsec)/1000000000.0;
		writeTime += writeEndTime-writeStartTime+addTime;
	}
	fclose(tempfp);
	fclose(output);
	fclose(orifp);
	fclose(parifp);
	//delete(temp_fp);
	return 0;
}

//concatenated decoding
void inner_decoding(decoded_blocks *db,unsigned char * c_in_codeword, unsigned long * indices){ 
	int p;
		//for(p=0;p<v;p++) {
		//	printf("random index #%d: %lu\n",p,indices[p]);
		//}
	unsigned char c_in_message[v*k2],temp[n2],c_out_codeword[n1],c_out_message[v*k1];
	int c_index=0,m_index=0,i,j,m,index=0;
	int erasure[1];
	
	// cin decoding
	printf("concatenated Cin decoding...\n");
	for(j=0;j<w*32/n2;j++){
		for(i=0;i<n2;i++){
			temp[i]=c_in_codeword[c_index++];
		}
		decode_data(temp, n2);
		if (check_syndrome () != 0) {
			correct_errors_erasures(temp,n2,0,erasure);
		}
		for(i=0;i<k2;i++){
			c_in_message[m_index++]=temp[k2];	
		}
	}

	//cout decoding: get the file and parity part
	printf("concatenated Cout decoding...\n");
	c_index=0;
	for(i=0;i<v;i++){
		index=0;
		//create codeword
		//copy message part
		for(j=0;j<k1;j++){
			c_out_codeword[index++]=c_in_message[j];		
		}

		//copy parity part codeword
		p = (m_index/2) + (i*d1);
		for(j=0;j<d1;j++){
			c_out_codeword[index++]=c_in_message[j+p];		
		}	
		decode_data(c_out_codeword, n1);
		if (check_syndrome () != 0) {
			correct_errors_erasures(c_out_codeword,n1,0,erasure);
		}
		
		for(j=0;j<k1;j++){
			c_out_message[c_index++]=c_out_codeword[j];
		}
	}
	
	//c_out_message contains v decoded blocks
	//divide decoded message into v blocks from f1 to fv. 
	printf("updating Di...\n");
	for(i=0;i<v;i++){
		printf("indices[%d]=%lu\n",i,indices[i]);
		//divide codeword into 32 byte blocks
		int fi = indices[i];
		char block[32];
		for(j=0;j<32;j++){
			block[j]=c_out_message[(i*32)+j];
		}

		//check if similar codeword was already decoded and present in Di
		//if yes, just increase the frequency
		int notfound=1;
		for(j=0;j<alpha;j++){
			int flag=1;
			fflush(stdout);
			if(db[fi].frequency[j]==0) break;
			for(m=0;m<32;m++){
				if(db[fi].file_blocks[j][m]!=block[m]){
					flag=0;
					break;
				}		
			}
			if(flag){
				//int freq = db[fi].frequency[j];
				db[fi].frequency[j]++;	
				notfound=0;		
			}		
		}

		//if not found, add it in di		
		if(notfound){
			for(m=0;m<32;m++){
				db[fi].file_blocks[j][m] = block[m];		
			}
			db[fi].frequency[j] = 1;
		}	
	}
}

void inner_GMD(decoded_blocks *db,unsigned char * c_in_codeword, unsigned long * indices, FILE * fp){ 	
	unsigned char c_in_message[n1*k2],temp[n2],c_out_codeword[n1],c_out_message[v*32];
	int c_index=0,m_index=0,i,j,m,index=0;
	int erasure_index[n1];
	fflush(stdout);
	// cin decoding
	printf("concatenated Cin decoding...\n");
	for(j=0;j<n1;j++){
		for(i=0;i<n2;i++){
			temp[i]=c_in_codeword[c_index++];
		}
		unsigned char cpytemp[n2];
		memcpy(cpytemp,temp,n2);
		decode_data(temp, n2);
		if (check_syndrome () != 0) {
			int erasure[1];
			correct_errors_erasures(temp,n2,0,erasure);
		}
		int delta_dist = 0;
		for(i=0;i<n2;i++){
			if(temp[i]!=cpytemp[i])
				delta_dist++;
		}
		double prob;
		int d2 = n2-k2;
		if(delta_dist<d2/2)
			prob = 2*(double)delta_dist/d2;
		else
			prob = 1.0;
		srand(time(NULL));
		double random_num = (double)rand() / (double)RAND_MAX;
		for(i=0;i<k2;i++){
			if (random_num<prob)
				c_in_message[m_index++]=0;
			else
				c_in_message[m_index++]=temp[i];	
		}
		if (random_num<prob)
			erasure_index[n1] = 1;
		else
			erasure_index[n1] = 0;
	}
	
	//printf("display c_in_message\n");
	//displayCharArray(c_in_message,sizeof(c_in_message));
	printf("concatenated Cout decoding...\n");
	c_index=0;
	for(i=0;i<v;i++){
		int erasure[n1];
		int num_erasure = 0;
		index=0;
		//create codeword
		//copy message part
		for(j=0;j<k1;j++){
			c_out_codeword[index++]=c_in_message[i*k1+j];		
		}
		int p;
		//copy parity part codeword
		int d1 = n1-k1;
		p = v*32 + (i*d1);
		for(j=0;j<d1;j++){
			c_out_codeword[index++]=c_in_message[j+p];		
		}	
		//printf("display c_out_codeword for %d\n",i);
		//displayCharArray(c_out_codeword,sizeof(c_out_codeword));
		
		if(erasure_index[v]==1) {
			int ki;
			for(ki=0;ki<k2;ki++) {
				erasure[num_erasure] = ki;
				num_erasure++;
			}
		}
		if(erasure_index[v]==1) {
			int di;
			int d2 = n2-k2;
			for(di=0;di<d2;di++) {
				erasure[num_erasure] = k2+di;
				num_erasure++;
			}
		}		
		decode_data(c_out_codeword, n1);
		if (check_syndrome () != 0) {
			correct_errors_erasures(c_out_codeword,n1,num_erasure,erasure);
		}
		
		for(j=0;j<k1;j++){
			c_out_message[c_index++]=c_out_codeword[j];
		}
	}
	
	//printf("updating Di...\n");
	for(i=0;i<v;i++){
		//printf("indices[%d]=%lu\n",i,indices[i]);
		//divide codeword into 32 byte blocks
		int fi = indices[i];
		unsigned char block[32];
		for(j=0;j<32;j++){
			block[j]=c_out_message[(i*32)+j];
		}

		//check if similar codeword was already decoded and present in Di
		//if yes, just increase the frequency
		int notfound=1;
		for(j=0;j<alpha;j++){
			int flag=1;
			if(db[fi].frequency[j]==0) break;
			for(m=0;m<32;m++){
				if(db[fi].file_blocks[j][m]!=block[m]){
					flag=0;
					break;
				}		
			}
			if(flag){
				//int freq = db[fi].frequency[j];
				db[fi].frequency[j]++;	
				notfound=0;		
			}		
		}

		//if not found, add it in di		
		if(notfound){
			for(m=0;m<32;m++){
				db[fi].file_blocks[j][m] = block[m];		
			}
			db[fi].frequency[j] = 1;
		}
        /*
		printf("display db %d:\n",fi);
		displayCharArray(db[fi].file_blocks[j],32);
		fseek(fp,fi*32,SEEK_SET);
		unsigned char buffer[32];
		fread(buffer, 32, 1, fp);
		printf("real content in the file block %d:\n",fi);
		displayCharArray(buffer,32);
         */
	}
}
